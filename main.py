import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_token")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—ë)
SCHEDULE = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": [
        "üìö 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "üìñ 10:30 - –§–∏–∑–∏–∫–∞", 
        "üíª 12:00 - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "üçΩ 13:30 - –û–±–µ–¥",
        "üìä 15:00 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ],
    "–≤—Ç–æ—Ä–Ω–∏–∫": [
        "üåê 9:00 - –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "üì± 10:30 - –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "üé® 12:00 - –î–∏–∑–∞–π–Ω",
        "üçΩ 13:30 - –û–±–µ–¥",
        "üìà 15:00 - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
    ],
    "—Å—Ä–µ–¥–∞": [
        "ü§ñ 9:00 - –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "üîê 10:30 - –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "‚òÅÔ∏è 12:00 - –û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "üçΩ 13:30 - –û–±–µ–¥",
        "üìä 15:00 - –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    ],
    "—á–µ—Ç–≤–µ—Ä–≥": [
        "üì± 9:00 - iOS —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "ü§ñ 10:30 - Android —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
        "üéÆ 12:00 - –ì–µ–π–º–¥–µ–≤",
        "üçΩ 13:30 - –û–±–µ–¥",
        "üíº 15:00 - –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
    ],
    "–ø—è—Ç–Ω–∏—Ü–∞": [
        "üåç 9:00 - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
        "üíº 10:30 - –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "üöÄ 12:00 - –°—Ç–∞—Ä—Ç–∞–ø—ã",
        "üçΩ 13:30 - –û–±–µ–¥",
        "üìù 15:00 - –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"
    ],
    "—Å—É–±–±–æ—Ç–∞": [
        "–û—Ç–¥—ã—Ö–∞–π"
    ],
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": [
        "–û—Ç–¥—ã—Ö–∞–π"
    ]
}

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
def get_week_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            ],
            [
                InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_–≤—Ç–æ—Ä–Ω–∏–∫")
            ],
            [
                InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="day_—Å—Ä–µ–¥–∞")
            ],
            [
                InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_—á–µ—Ç–≤–µ—Ä–≥")
            ],
            [
                InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_–ø—è—Ç–Ω–∏—Ü–∞")
            ],
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today"),
            ]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = """
üìÖ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ <3
    """
    await message.answer(welcome_text, reply_markup=get_week_inline_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def show_today_schedule(message: types.Message = None, callback: types.CallbackQuery = None):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    today_index = datetime.now().weekday()
    
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = days[today_index]
    
    schedule_today = SCHEDULE.get(today, [])
    
    if schedule_today:
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.capitalize()}):\n\n"
        for lesson in schedule_today:
            response += f"‚Ä¢ {lesson}\n"
    else:
        response = f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    if callback:
        await callback.answer(response, show_alert=True)
    else:
        await message.answer(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
async def show_full_week(message: types.Message = None, callback: types.CallbackQuery = None):
    response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:\n\n"
    
    for day, lessons in SCHEDULE.items():
        response += f"üîπ {day.capitalize()}:\n"
        for lesson in lessons:
            response += f"   ‚Ä¢ {lesson}\n"
        response += "\n"
    
    if callback:
        # –î–ª—è callback —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 200:
            parts = [response[i:i+200] for i in range(0, len(response), 200)]
            for part in parts[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                await callback.answer(part, show_alert=True)
                await asyncio.sleep(0.5)
        else:
            await callback.answer(response, show_alert=True)
    else:
        await message.answer(response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
async def show_day_schedule_popup(day: str, callback: types.CallbackQuery):
    schedule = SCHEDULE.get(day, [])
    
    if schedule:
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()}:\n\n"
        for lesson in schedule:
            response += f"‚Ä¢ {lesson}\n"
    else:
        response = f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer(response, show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data.startswith("day_"))
async def handle_day_callback(callback: types.CallbackQuery):
    day = callback.data.replace("day_", "")
    await show_day_schedule_popup(day, callback)

@dp.callback_query(F.data == "today")
async def handle_today_callback(callback: types.CallbackQuery):
    await show_today_schedule(callback=callback)

@dp.callback_query(F.data == "week")
async def handle_week_callback(callback: types.CallbackQuery):
    await show_full_week(callback=callback)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
